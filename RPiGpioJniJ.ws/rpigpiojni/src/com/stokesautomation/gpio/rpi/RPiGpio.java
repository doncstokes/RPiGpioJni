package com.stokesautomation.gpio.rpi;

/**
 * JNI Wrapper for C code used by python RPi.GPIO
 * 
 * <p>
 * The python RPi.GPIO module contains a source file "c_gpio.c" implemented
 * in the C programming language. This source file is self contained and can
 * easily be reused outside of the python environment.
 * </p>
 * 
 * <p>
 * This class is a Java Native Interface wrapper that allows Java code to
 * invoke functions in the C code mentioned above. Constants that are defined
 * in the C header file "c_gpio.h" for use as parameters to the C functions
 * have been defined in this class.
 * </p>
 * 
 * <p>
 * When the java compiler is invoked with the -h option, a C language header
 * file is created that contains function prototypes for all Java methods
 * tagged as "native". Using those prototypes, I created a corresponding C
 * source file "rpigpiojni.c" with implementations for each prototyped
 * function. These implementations simply pass the parameters on to the
 * corresponding functions in the "c_gpio.c" file and return any values.
 * Notice that files "rpigpiojni.c" and "c_gpio.c" are compiled in a separate
 * eclipse project to create the shared object library. This library is
 * dynamically loaded at runtime by the jvm during the constructor for this
 * class. This wrapper  target generated by the C eclipse project is
 * "librpigpiojni.so". This library must be located in a suitable place 
 * where the Linux loader can find it. This can
 * be accomplished by placing the shared library in one of the existing system
 * "lib" directories or another directory of choice using the "LD_LIBRARY_PATH"
 * environment variable.
 * </p>
 * 
 * <p>
 * Usage of this class follows this sequence.
 * Invoke the setup method first to initialize the C code.
 * Invoke the setup_gpio method for each GPIO pin used on the Raspberry Pi.
 * Note that the GPIO numbers use the "BCM" numbering scheme and not the
 * Raspberry Pi physical pin numbers. For example, BCM GPIO #17 corresponds
 * to RPi physical pin #11.
 * Use the input method as needed to read the logic level of GPIO inputs.
 * Use the output method as needed to change the logic level of GPIO outputs.
 * When input/output operations have concluded, call the cleanup method to
 * release resources used by the C code.
 * An example of this technique can me found in the "Main.java" file included
 * with this project that was used to test this module.
 * Caution - be sure you understand how this module works and that you have
 * no hardware connected to the Raspberry Pi GPIO pins that could be damaged.
 * For additional documentation on the "c_gpio.c" usage, please see the link
 * to the raspberry-gpio-python project below.
 * </p>
 * 
 * <p>
 * Updates for c_gpio.c can be found at
 * <a href="https://sourceforge.net/projects/raspberry-gpio-python">
 * raspberry-gpio-python</a>
 * This JNI wrapper was initially developed and tested with Raspberry Pi
 * version 4 hardware. When using newer hardware, the "c_gpio.c" will most
 * likely need to be updated.
 * </p>
 * 
 * <p>
 * My compliments go out to Ben Croston for creating a wonderfully reusable
 * piece of software in the RPi.GPIO python module.
 * </p>
 * 
 * <p>
 * This code is offered under the GPL license included with this module.
 * </p>
 * 
 * @author don
 */
public class RPiGpio {
	
	public final static int VERSION = 1;
	public final static String LIB_NAME = "rpigpiojni";
	
	public RPiGpio() throws Exception {
		int libVer = getVersion();
		if (libVer != VERSION) {
			throw new RPiVersionException(VERSION, libVer, LIB_NAME);
		}
	}
	
	// These constants are used with the setup_gpio direction parameter.
	public static final int INPUT  = 1;
	public static final int OUTPUT = 0;
	public static final int ALT0   = 4;

	// These constants are used with the setup_gpio pud parameter.
	public static final int PUD_OFF  = 0;
	public static final int PUD_DOWN = 1;
	public static final int PUD_UP   = 2;
	
	// These constants are used with the output_gpio value parameter.
	public static final int LOW  = 0;
	public static final int HIGH = 1;

	// These constants represent values returned by the setup method.
	public static final int SETUP_OK = 0;
	public static final int SETUP_DEVMEM_FAIL = 1;
	public static final int SETUP_MALLOC_FAIL = 2;
	public static final int SETUP_MMAP_FAIL = 3;
	public static final int SETUP_CPUINFO_FAIL = 4;
	public static final int SETUP_NOT_RPI_FAIL = 5;
	
	// These methods correspond to each of the C functions in "c_gpio.c".
	native public int setup();
	/**
	 * Provision a Raspberry Pi GPIO pin as input or output.
	 * @param gpio  BCM GPIO number.
	 * @param direction  Determine input or output of the GPIO pin
	 * @param pud  Enable internal RPi pull-up or pull-down resistors for inputs.
	 */
	native public void setup_gpio(int gpio, int direction, int pud);
	native public int gpio_function(int gpio);
	native public void output_gpio(int gpio, int value);
	native public int input_gpio(int gpio);
	native public void set_rising_event(int gpio, int enable);
	native public void set_falling_event(int gpio, int enable);
	native public void set_high_event(int gpio, int enable);
	native public void set_low_event(int gpio, int enable);
	native public int eventdetected(int gpio);
	native public void cleanup();
	
	// Non c_gpio.c methods ...
	
	native public int getVersion();
	
	/**
	 * Class constructor loads shared library.
	 */
	static {
		System.loadLibrary(LIB_NAME); // librpigpiojni.so
	}
}
